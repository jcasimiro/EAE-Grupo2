"brown",
"green",
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=10, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 4   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
"purple",
"cyan",
"brown",
"green",
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=10, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 4   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
rgb(165/255, 164/255, 250/255),
"cyan",
"brown",
"green",
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=10, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 4   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
rgb(165/255, 164/255, 250/255),
"cyan",
"brown",
"green",
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=5, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 5   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
rgb(165/255, 164/255, 250/255),
rgb(197/255, 236/255, 250/255),
"brown",
"green",
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=5, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 5   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
rgb(165/255, 164/255, 250/255),
rgb(197/255, 236/255, 250/255),
rgb(82/255, 67/255, 23/255),
"green",
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=5, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 6   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
rgb(165/255, 164/255, 250/255),
rgb(197/255, 236/255, 250/255),
rgb(82/255, 67/255, 23/255),
rgb(203/255, 231/255, 104/255),
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=5, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 6   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
rgb(165/255, 164/255, 250/255),
rgb(197/255, 236/255, 250/255),
rgb(82/255, 67/255, 23/255),
rgb(203/255, 231/255, 104/255),
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=5, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 6   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
rgb(165/255, 164/255, 250/255),
rgb(197/255, 236/255, 250/255),
rgb(192/255, 155/255, 39/255),
rgb(203/255, 231/255, 104/255),
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=5, vertex.label=NA, vertex.color=V(g)$color, asp=0)
# Carregar a biblioteca igraph
library(igraph)
# Parâmetros iniciais
n0 <- 3  # Número de nós iniciais
m <- 3   # Número de arestas que cada novo nó terá
n <- 7   # Número total de nós desejado na rede
# Criar uma rede inicial com n0 nós
g <- make_full_graph(n0)
# Crescer a rede adicionando um novo nó por vez
for(i in seq(n0 + 1, n)) {
# Inicializar o vetor de cores para os nós.
# Nota: As 11 cores permite ir até aos 11 nós, caso seja pretendido
# adicionar mais nós é preciso adicionar mais cores para o programa
# não dar erro.
cores <- c(
rgb(250/255, 251/255, 101/255),
rgb(232/255, 149/255, 112/255),
rgb(165/255, 164/255, 250/255),
rgb(197/255, 236/255, 250/255),
rgb(192/255, 155/255, 39/255),
rgb(203/255, 231/255, 104/255),
"red",
"blue",
"gray",
"coral",
"maroon"
)
# Recalcular o grau de cada nó existente
graus <- degree(g, mode = "all")
# Adicionar o novo nó (sempre branco)
g <- g + vertices(1)
# Colocar o nó adicionado como branco
cores[i] = "white"
# Remover as cores de nós não usados
n <- length(cores)-i
cores <- cores[-((length(cores)-n+1):length(cores))]
V(g)$color <- cores
# Calcular a probabilidade de conexão para cada nó existente
prob <- graus / sum(graus)
# Escolher m nós com base na probabilidade de conexão
nos_conectados <- sample(vcount(g) - 1, m, replace = FALSE, prob = prob)
# Conectar o novo nó aos nós escolhidos
arestas_novas <- c(sapply(nos_conectados, function(x) c(vcount(g), x)))
g <- g + edges(arestas_novas)
}
# Mostrar a rede
plot(g, vertex.size=5, vertex.label=NA, vertex.color=V(g)$color, asp=0)
install.packages(c("bslib", "callr", "dbplyr", "deldir", "digest", "fable", "feasts", "forecast", "future", "future.apply", "ggdist", "ggsci", "globals", "gmodels", "Hmisc", "htmltools", "httpuv", "igraph", "lattice", "lava", "lintr", "lme4", "pkgbuild", "processx", "ragg", "RcppArmadillo", "RcppEigen", "remotes", "rmarkdown", "rstudioapi", "sass", "shiny", "stinepack", "systemfonts", "tidyselect", "tinytex", "xfun"))
install.packages(c("Amelia", "brio", "explore", "fabletools", "fs", "ggfortify", "ggplot2", "gtable", "labelled", "lme4", "matrixStats", "openssl", "RcppArmadillo", "seriation", "styler", "survival", "testthat"))
setwd("~/Projects/EAE-Grupo2")
# No menu do RStudio:
# selecione Session > Set Working Directory > Choose Directory...
if (!requireNamespace("plot.matrix", quietly = TRUE))
install.packages("plot.matrix")
if (!requireNamespace("dbscan", quietly = TRUE))
install.packages("dbscan")
if (!requireNamespace("ggplot2", quietly = TRUE))
install.packages("ggplot2")
if (!requireNamespace("rpart", quietly = TRUE))
install.packages("rpart")
if (!requireNamespace("rpart.plot", quietly = TRUE))
install.packages("rpart.plot")
if (!requireNamespace("caret", quietly = TRUE))
install.packages("caret")
if (!requireNamespace("stats", quietly = TRUE))
install.packages("stats")
if (!requireNamespace("pROC", quietly = TRUE))
install.packages("pROC")
if (!requireNamespace("e1071", quietly = TRUE))
install.packages("e1071")
if (!requireNamespace("foreach", quietly = TRUE))
install.packages("foreach")
if (!requireNamespace("doParallel", quietly = TRUE))
install.packages("doParallel")
if (!requireNamespace("doParallel", quietly = TRUE))
install.packages("factoextra")
library(plot.matrix)
library(dbscan)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
library(stats)
library(pROC)
library(e1071)
library(foreach)
library(doParallel)
library(factoextra)
# Function to show an image
plotfigure <<- function(row, dataset)
{
X = NULL
if (!is.null(nrow(dataset)))
{
X = data.frame(matrix(dataset[row, 2:785], nrow = 28))
}
else
{
X = data.frame(matrix(dataset[row, 2:785], nrow = 28))
}
m1 = data.matrix(X)
plot(m1, cex = 0.5)
}
# Read the training and testing dataset
train_data <<-
read.csv("emnist-balanced-train.csv",
sep = ",",
header = FALSE)
